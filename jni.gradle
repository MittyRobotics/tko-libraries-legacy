if (project.hasProperty('releaseMode')) {
    wpilibRepositories.addAllReleaseRepositories(project)
} else {
    wpilibRepositories.addAllDevelopmentRepositories(project)
}

/*
 *  MIT License
 *
 *  Copyright (c) 2020 Mitty Robotics (Team 1351)
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 */

// Apply C++ configuration
apply from: 'config.gradle'

// Apply Java configuration
dependencies {
    implementation 'edu.wpi.first.cscore:cscore-java:2020.+'
    implementation 'edu.wpi.first.cameraserver:cameraserver-java:2020.+'
    implementation 'edu.wpi.first.ntcore:ntcore-java:2020.+'
    implementation 'edu.wpi.first.wpilibj:wpilibj-java:2020.+'
    implementation 'edu.wpi.first.wpiutil:wpiutil-java:2020.+'
    implementation 'edu.wpi.first.hal:hal-java:2020.+'
    implementation 'edu.wpi.first.thirdparty.frc2020.opencv:opencv-java:3.4.7-3'
}

// Set up exports properly
nativeUtils {
    exportsConfigs {
        // Main library is just default empty. This will export everything
        Vendor {
        }
    }
    privateExportsConfigs {
        // Only export explicit symbols from driver library
        VendorDriver {
            exportsFile = project.file("src/main/driver/symbols.txt")
        }
    }
}

model {
    components {
        Vendor(NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/native/cpp'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/native/include'
                    }
                }
            }
            binaries.all {
                lib library: 'VendorDriver', linkage: 'shared'
            }
            nativeUtils.useRequiredLibrary(it, 'wpilib_shared')
        }

        VendorDriver(JniNativeLibrarySpec) {
            enableCheckTask true
            javaCompileTasks << compileJava
            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.windowsx64)

            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.roborio)
            // Leave these for future proofing
            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.raspbian)
            jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.aarch64bionic)
            sources {
                cpp {
                    source {
                        srcDirs 'src/main/driver/cpp'
                        include '**/*.cpp'
                    }
                    exportedHeaders {
                        srcDirs 'src/main/driver/include'
                    }
                }
            }

            nativeUtils.useRequiredLibrary(it, "driver_shared")
        }
    }
}